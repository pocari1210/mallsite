


◆ルートの編集◆

ディレクトリ
\routes\web.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

  // Product All Route 
  Route::controller(ProductController::class)->group(function () {

    // Product:複数画像の更新処理のルート
    Route::post('/update/product/multiimage', 'UpdateProductMultiimage')
      ->name('update.product.multiimage');


/////////////////////////////////////////////////////////////////////////////////////////////////

◆ビューの編集(遷移元)◆

ディレクトリ

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・




/////////////////////////////////////////////////////////////////////////////////////////////////

◆コントローラーの編集◆

ディレクトリ
\app\Http\Controllers\Backend\ProductController.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

  public function EditProduct($id)
  {
    $multiImgs = MultiImg::where('product_id', $id)->get();

    return view(
      'backend.product.product_edit',
      compact('brands', 'categories', 'activeVendor', 'products', 'subcategory', 'multiImgs')
    );

★コード解説★
複数画像を登録しているMultiImgのDBから登録された画像を
表示している

  // 複数画像の更新処理のコントローラー
  public function UpdateProductMultiimage(Request $request)
  {
    $imgs = $request->multi_img;

    foreach ($imgs as $id => $img) {
      $imgDel = MultiImg::findOrFail($id);
      unlink($imgDel->photo_name);

      $make_name = hexdec(uniqid()) . '.' . $img->getClientOriginalExtension();
      Image::make($img)->resize(800, 800)->save('upload/products/multi-image/' . $make_name);
      $uploadPath = 'upload/products/multi-image/' . $make_name;

      MultiImg::where('id', $id)->update([
        'photo_name' => $uploadPath,
        'updated_at' => Carbon::now(),

      ]);
    } // end foreach

    $notification = array(
      'message' => 'Product Multi Image Updated Successfully',
      'alert-type' => 'success'
    );

    return redirect()->back()->with($notification);
  } // End Method 




/////////////////////////////////////////////////////////////////////////////////////////////////