
3-編集ページと更新処理と削除処理

◆ルートの編集◆

ディレクトリ
\routes\web.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

  // Slider All Route 
  Route::controller(SliderController::class)->group(function () {

    // Slider：編集ページのルート
    Route::get('/edit/slider/{id}', 'EditSlider')
      ->name('edit.slider');

    // Slider：更新処理のルート
    Route::post('/update/slider', 'UpdateSlider')
      ->name('update.slider');

    // Slider：削除処理のルート
    Route::get('/delete/slider/{id}', 'DeleteSlider')
      ->name('delete.slider');


/////////////////////////////////////////////////////////////////////////////////////////////////

◆ビューの編集(遷移元)◆

ディレクトリ
\resources\views\backend\slider\slider_all.blade.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

  <td>

    ↓↓routeの編集↓↓
    <a href="{{ route('edit.slider',$item->id) }}" class="btn btn-info">Edit</a>
    <a href="{{ route('delete.slider',$item->id) }}" class="btn btn-danger" id="delete">Delete</a>
  </td>


/////////////////////////////////////////////////////////////////////////////////////////////////

◆コントローラーの編集◆

ディレクトリ
\app\Http\Controllers\Backend\SliderController.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

  // 変種ページ疎通のコントローラー
  public function EditSlider($id)
  {
    $sliders = Slider::findOrFail($id);
    return view('backend.slider.slider_edit', compact('sliders'));
  } // End Method 

  // 更新処理のコントローラー
  public function UpdateSlider(Request $request)
  {
    $slider_id = $request->id;
    $old_img = $request->old_image;

    if ($request->file('slider_image')) {

      $image = $request->file('slider_image');
      $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
      Image::make($image)->resize(2376, 807)->save('upload/slider/' . $name_gen);
      $save_url = 'upload/slider/' . $name_gen;

      if (file_exists($old_img)) {
        unlink($old_img);
      }

      Slider::findOrFail($slider_id)->update([
        'slider_title' => $request->slider_title,
        'short_title' => $request->short_title,
        'slider_image' => $save_url,
      ]);

      $notification = array(
        'message' => 'Slider Updated with image Successfully',
        'alert-type' => 'success'
      );

      return redirect()->route('all.slider')->with($notification);
    } else {

      Slider::findOrFail($slider_id)->update([
        'slider_title' => $request->slider_title,
        'short_title' => $request->short_title,
      ]);

      $notification = array(
        'message' => 'Slider Updated without image Successfully',
        'alert-type' => 'success'
      );

      return redirect()->route('all.slider')->with($notification);
    } // end else

  } // End Method 

  // 削除処理のコントローラー
  public function DeleteSlider($id)
  {
    $slider = Slider::findOrFail($id);
    $img = $slider->slider_image;
    unlink($img);

    Slider::findOrFail($id)->delete();

    $notification = array(
      'message' => 'Slider Deleted Successfully',
      'alert-type' => 'success'
    );

    return redirect()->back()->with($notification);
  } // End Method 

/////////////////////////////////////////////////////////////////////////////////////////////////

◆ビューの編集(遷移先)◆

ディレクトリ
\resources\views\backend\slider\slider_edit.blade.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・