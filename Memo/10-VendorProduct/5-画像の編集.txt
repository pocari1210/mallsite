


◆ルートの編集◆

ディレクトリ
\routes\web.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

  // Vendor Add Product All Route 
  Route::controller(VendorProductController::class)->group(function () {

    // VendorProduct:画像の更新のルート      
    Route::post('/vendor/update/product/thambnail', 'VendorUpdateProductThabnail')
      ->name('vendor.update.product.thambnail');

    // VendorProduct:複数画像の更新のルート    
    Route::post('/vendor/update/product/multiimage', 'VendorUpdateProductmultiImage')
      ->name('vendor.update.product.multiimage');

    // VendorProduct:複数画像の削除のルート          
    Route::get('/vendor/product/multiimg/delete/{id}', 'VendorMultiimgDelete')
      ->name('vendor.product.multiimg.delete');


/////////////////////////////////////////////////////////////////////////////////////////////////

◆ビューの編集(遷移元)◆

ディレクトリ
\resources\views\vendor\backend\product\vendor_product_edit.blade.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

画像の項目のrouteをweb.phpを見て確信し、編集する

/////////////////////////////////////////////////////////////////////////////////////////////////

◆コントローラーの編集◆

ディレクトリ
\app\Http\Controllers\Backend\VendorProductController.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

  // 画像の更新のコントローラー
  public function VendorUpdateProductThabnail(Request $request)
  {
    $pro_id = $request->id;
    $oldImage = $request->old_img;

    $image = $request->file('product_thambnail');
    $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
    Image::make($image)->resize(800, 800)->save('upload/products/thambnail/' . $name_gen);
    $save_url = 'upload/products/thambnail/' . $name_gen;

    if (file_exists($oldImage)) {
      unlink($oldImage);
    }

    Product::findOrFail($pro_id)->update([
      'product_thambnail' => $save_url,
      'updated_at' => Carbon::now(),
    ]);

    $notification = array(
      'message' => 'Vendor Product Image Thambnail Updated Successfully',
      'alert-type' => 'success'
    );

    return redirect()->back()->with($notification);
  } // End Method 

  // 複数画像の更新のコントローラー
  public function VendorUpdateProductmultiImage(Request $request)
  {
    $imgs = $request->multi_img;

    foreach ($imgs as $id => $img) {
      $imgDel = MultiImg::findOrFail($id);
      unlink($imgDel->photo_name);

      $make_name = hexdec(uniqid()) . '.' . $img->getClientOriginalExtension();
      Image::make($img)->resize(800, 800)->save('upload/products/multi-image/' . $make_name);
      $uploadPath = 'upload/products/multi-image/' . $make_name;

      MultiImg::where('id', $id)->update([
        'photo_name' => $uploadPath,
        'updated_at' => Carbon::now(),
      ]);
    } // end foreach

    $notification = array(
      'message' => 'Vendor Product Multi Image Updated Successfully',
      'alert-type' => 'success'
    );

    return redirect()->back()->with($notification);
  } // End Method 

  // 複数画像の削除のコントローラー
  public function VendorMultiimgDelete($id)
  {
    $oldImg = MultiImg::findOrFail($id);
    unlink($oldImg->photo_name);

    MultiImg::findOrFail($id)->delete();

    $notification = array(
      'message' => 'Vendor Product Multi Image Deleted Successfully',
      'alert-type' => 'success'
    );

    return redirect()->back()->with($notification);
  } // End Method 






/////////////////////////////////////////////////////////////////////////////////////////////////